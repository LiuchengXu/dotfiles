let g:spacevim_plug_home = '~/.vim/plugged'

" Disable rust layer as the features of it are mostly unused and
" somehow always run rustfmt on save regardless the option.
" \ 'rust',
let g:spacevim_layers = [
      \ 'programming', 'fzf', 'better-defaults', 'which-key', 'better-motion', 'editing', 'text-align', 'formatting',
      \ 'python', 'c-c++', 'latex', 'goyo', 'graphviz', 'git', 'github', 'chinese', 'javascript','lsp'
      \ ]

Layer 'file-manager'
Layer 'markdown'

Layer 'syntax-checking'
let g:spacevim_excluded = ['dominikduda/vim_current_word', 'kshenoy/vim-signature', 'python-mode/python-mode']

Layer 'file-manager'
" let g:coc_global_extensions = ['coc-rust-analyzer', 'coc-explorer']
let g:coc_force_debug = 1

let g:spacevim_nerd_fonts = 1
let g:airline_powerline_fonts = 1
let g:spacevim_lsp_engine = 'coc'
let g:spacevim_enable_clap =  1
let g:spacevim_enable_true_color = 1
let g:spacevim_disable_nerdtree_arrow_icons = 1

let clap_search_box_border_style = 'nil'
let g:clap_disable_bottom_top = 1

let g:which_key_floating_relative_win = 1

" Uncomment the following line if your terminal(-emulator) supports true colors.
if $TERM_PROGRAM !~? 'Apple_Terminal'
  let g:spacevim_enable_true_color = 1
endif

let g:space_vim_plugin_hi_groups = 1

let g:vista_echo_cursor_strategy = 'floating_win'

tnoremap <Esc> <C-\><C-n>

let g:spacevim_lsp_engine = 'coc'
" let g:spacevim_use_ncm2 = 1 | Layer 'auto-completion' | Layer 'syntax-checking'
" let g:spacevim_enable_coc_completion = 0

let g:clap_provider_yanks_history = '~/.clap_yanks.history'

function! UserInit()
  Plug 'junegunn/seoul256.vim'
  Plug 'junegunn/fzf.vim'
  Plug '~/.fzf'
  Plug 'vn-ki/coc-clap'
  Plug 'chuling/vim-equinusocio-material'

  Plug '~/.vim/plugged/vim-deco'
  Plug 'arzg/vim-colors-xcode'
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
endfunction

" let g:clap_enable_icon = 0
let g:clap_theme = 'material_design_dark'

" Override the default settings from space-vim as well as adding extras
function! UserConfig()
  let g:fzf_layout = { 'window': {'width': 0.8, 'height': 0.6 } }

  set norelativenumber
  set timeoutlen=500
  set wrap
  set list listchars=tab:¬¶\ ,trail:‚Ä¢,extends:‚ùØ,precedes:‚ùÆ

  let &guifont = 'FiraCode Nerd Font:h16'
  " let &guifont = 'Iosevka-Slab:h16'
  " let &guifont = 'Fantasque Sans Mono:h16'

  if g:spacevim.nvim
    " Reset wildmode for wildoptions=pum as changing it somehow invalids
    " cmdline pum.
    set wildmode&
  endif
  " let g:clap_layout = {'width': '80%', 'height': '33%', 'row': '33%', 'col': '10%'}
  let g:eleline_slim = 1

  nnoremap <C-f> :Clap files<CR>
  nnoremap <C-p> :Clap grep<CR>
  nnoremap <Leader>pw :Clap grep ++query=<cword><CR>

  let g:ale_sign_error = "‚óâ"
  let g:ale_sign_warning = "‚óâ"
  let g:ale_virtualtext_cursor = 1
  let g:ale_virtualtext_prefix = "üí° "
  highlight ALEErrorSign ctermfg=9 guifg=#C30500
  highlight ALEWarningSign ctermfg=11 guifg=#ED6237

  hi link CocHighlightText Pmemu

  function! FinderReveal() abort
    if empty(expand('%:p'))
      CocCommand explorer --toggle --width=25
    else
      execute 'CocCommand explorer --toggle --width=25 --reveal='.expand('%:p')
    endif
    call timer_start(200, { -> execute('normal! zz') })
  endfunction

  command! ExplorerFind call FinderReveal()

  nnoremap <C-A> ggVG

  nnoremap <silent> gd :Deco definition<CR>
  nnoremap <silent> gi :Deco implementation<CR>
  nnoremap <silent> gr :Deco references<CR>
  nnoremap <silent> K  :Deco hover<CR>

  function! GotoFile() abort
    let git_dir = system('git rev-parse --git-dir')
    if v:shell_error
      Clap files
    else
      Clap git_files
    endif
  endfunction

  nnoremap <silent> gf :call GotoFile()<CR>

  nnoremap <silent> <Leader>ft :CocCommand explorer --toggle --width=25<CR>
  nnoremap <silent> <Leader>fd :call FinderReveal()<CR>

  command! ProfileStart call spacevim#util#ProfileStart()
  command! ProfileStop call spacevim#util#ProfileStop()

  function! MarkQfEntry() abort
    cfirst
    normal! m1
    let idx = 2
    let qf_len = len(getqflist())
    while idx <= qf_len
      if idx < qf_len
        cnext
      endif
      execute 'normal! m'.idx
      let idx += 1
    endwhile
    cfirst
    echom "All quickfix entries have been number marked"
  endfunction

  command! MarkQfEntry call MarkQfEntry()

  augroup X
    autocmd!

    autocmd FileType coc-explorer setlocal cursorline

    if exists('*CocActionAsync')
      autocmd CursorHold * silent call CocActionAsync('highlight')
    endif

    autocmd VimEnter * call timer_start(100, { -> vista#RunForNearestMethodOrFunction()})

    autocmd BufWritePre *.rs call TryRustfmt()
  augroup END

  vnoremap <C-P> :Clap grep ++query=@visual<CR>
endfunction

function! TryRustfmt() abort
  if exists('b:git_dir') && b:git_dir =~? 'substrate'
    " Do not run rustfmt when in substrate.
  else
    call spacevim#lang#util#Format()
  endif
endfunction

command! CommitRef call spacevim#util#GitHubCommitRef()
